Angular structure
-root
  -public  : if no token
    -description of app
    -sign in button
  -app     : if token
    -Nav bar
    -Main pane
      -Find Books
        -shows available books (paginated)
        -allows searching for books
        -allows requesting a book
      -My Library
        -shows borrowed books
        -shows lent books
          -allows checking in a returned book
        -shows books owned
          -allows adding and deleting books
      -Requests
        -shows requests for my books
          -allows checking out a requested book (and setting a due date)
        -shows my requests for books
        (-shows outgoing friend requests)
        (-shows incoming friend requests
          -allows approving a friend request
          -allows denying a friend request
        )
      (-Friends
        -shows list of friends (and contact info?)
        -allows searching for friends
        -allows requesting a friend
      )
      -Account
        -allows deleting an account

Design ideas
-keep data model (relevant to view) on the client
-data model populates views
-AJAX to backend updates data model
  -how to propagate changes to views asynchronously? Observables?
-operations that require API call
  -performed immediately on the client (assuming success)
  -on success: do nothing
  -on failure: execute callback function (undo operation or throw error (to be caught by view controller?))
-structure:
  Interface service : conducts all transactions
  lower-level services : store data, have getAll, add, delete methods
    AvailableBooks
    OutgoingBookRequests
    Borrowing
    ---
    MyBooks
    IncomingBookRequests
    Lending

-Controllers have read-only access to lower-level services: .getAll(). They can only initiate actions using the Interface service.


-The data model services could all be built using the same code.


Data Types
----------
copy obj:
  copyid
  book  : book obj
  owner : user obj
  requests : number
  checked_out : bool

book obj:
  ISBN,
  title,
  subtitle,
  authors,
  categories,
  publisher,
  publishedDate,
  description,
  pageCount,
  language,
  imageLink,
  imageLinkSmall

user obj:
  id
  displayname

bookRequest obj:
  copy
  requester : user obj
  request_date   : date
  queue_position : number

borrowing obj:
  copy
  borrower : user
  checkout_date
  due_date (optional)

Interface service:
  .requestBook(copy)
    -add to OutgoingBookRequests
    -remove from AvailableBooks
  .cancelBookRequest(copy)
    -add to AvailableBooks
    -remove from OutgoingBookRequests
  ---
  .createCopy(data)
    -add to MyBooks
  .deleteCopy(copy)
    -remove from MyBooks
  .denyBookRequest(copy)
    -add to MyBooks
    -remove from IncomingBookRequests
  .checkoutBook(copy)
    -add to Lending
    -remove from Borrowing
  .checkinBook(copy)
    -add to MyBooks
    -remove from Lending

-friend deletion triggers:
  -delete relevant book requests
  -if currently borrowing:
    -borrower can't cancel friendship
    -loaner can (but this should probably be handled by the program)
