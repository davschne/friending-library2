/api/trans

  /request/:copyID DELETE

    DELETE FROM BookRequests
    WHERE requesterID = $userID
      AND copyID      = $copyID;

    [test:
    [SELECT * FROM BookRequests
    [WHERE requesterID = $userID
    [  AND copyID      = $copyID;

  /request         POST

    INSERT INTO BookRequests (requesterID, copyID, request_date)
    VALUES (
      $userID, $copyID, CURRENT_TIME
    );

    [test:
    [SELECT * FROM BookRequests
    [WHERE requesterID = $userID
    [  AND copyID      = $copyID;

  /deny            POST

    DELETE FROM BookRequests
    WHERE requesterID = $requesterID
      AND copyID      = $copyID;



  /checkout (formerly /approve)   POST

    BEGIN;
      DELETE FROM BookRequests
      WHERE requesterID = $uIDRequester
        AND copyID      = $copyID;

      INSERT INTO Borrowing (borrowerID, copyID, checkout_date)
      VALUES (
        $userID, $copyID, CURRENT_TIME
      );
    COMMIT;

  /checkin (formerly /returned)   POST

    DELETE FROM Borrowing
    WHERE borrowerID = $borrowerID
      AND copyID     = $copyID;

/api/books

  /          POST

    dbUtil.createCopy()

  /:copyID   DELETE

    DELETE FROM Copies
    WHERE copyID  = $copyID;

  /available GET (may return many results - stream results)

    -- all books that don't belong to user, aren't checked out, and user hasn't
    --   requested already

    SELECT *                         -- maybe refine this projection?
    FROM Copies c, Books b, Users u
    WHERE b.ISBN = c.ISBN
      AND u.uID  = c.ownerID
      AND c.copyID NOT IN (
        SELECT copyID
        FROM Borrowing
      )
      AND c.copyID NOT IN (
        SELECT copyID
        FROM BookRequests
        WHERE requesterID = $userID
      );

    -- limit to friends

    SELECT *                          -- maybe refine this projection?
    FROM Copies c, Books b, Users u
    WHERE b.ISBN = c.ISBN
      AND u.uID  = c.ownerID;
      AND c.ownerID IN (
        SELECT uID2
        FROM Friends
        WHERE uID1 = $userID
      )
      AND c.copyID NOT IN (
        SELECT copyID
        FROM Borrowing
      )
      AND c.copyID NOT IN (
        SELECT copyID
        FROM BookRequests
        WHERE requesterID = $userID
      );

/api/self

  /          GET

    SELECT *
    FROM Users
    WHERE uID = $userID;

  /book_requests_incoming GET

    SELECT u.display_name, r.request_date, b.title, b.authors, b.categories
    FROM   BookRequests r, Users u, Copies c, Books b
    WHERE r.copyID IN (
        SELECT copyID
        FROM   Copies
        WHERE  ownerID = $userID
      )
      AND c.copyID      = r.copyID
      AND u.uID         = r.requesterID
      AND b.ISBN        = c.ISBN;

  /book_requests_outgoing GET

    SELECT u.display_name, r.request_date, b.title, b.authors, b.categories
    FROM   BookRequests r, Users u, Copies c, Books b
    WHERE r.requesterID = $userID
      AND c.copyID      = r.copyID
      AND u.uID         = c.ownerID
      AND b.ISBN        = c.ISBN;

  /books_lent             GET

    SELECT u.display_name, r.checkout_date, b.title, b.authors, b.categories
    FROM   Borrowing brw, Users u, Copies c, Books b
    WHERE brw.copyID IN (
        SELECT copyID
        FROM   Copies
        WHERE  ownerID = $userID
      )
      AND c.copyID       = brw.copyID
      AND u.uID          = brw.borrowerID
      AND b.ISBN         = c.ISBN;

  /books_borrowed         GET

    SELECT u.display_name, r.checkout_date, b.title, b.authors, b.categories
    FROM   Borrowing brw, Users u, Copies c, Books b
    WHERE brw.borrowerID = $userID
      AND c.copyID       = brw.copyID
      AND u.uID          = c.ownerID
      AND b.ISBN         = c.ISBN;

  /          DELETE

    dbUtil.deleteUser()

  /books     GET    (may return many - stream results)

    SELECT *
    FROM Copies JOIN Book USING(ISBN)
    WHERE ownerID = $userID;

// extensions to the existing API:

/api/friends

  /            GET    (may return many results)

    SELECT *
    FROM Users
    WHERE uID IN (
      SELECT uID2
      FROM Friends
      WHERE uID1 = $userID
    );

  /:friendID   DELETE

    BEGIN;
      DELETE FROM Friends
      WHERE uID1 = $userID
        AND uID2 = $friendID;

      DELETE FROM Friends
      WHERE uID1 = $friendID
        AND uID2 = $userID;
    COMMIT;

  /requests

    /                    GET

      SELECT *
      FROM FriendRequests
      WHERE requesterID

    /                    POST

      INSERT INTO FriendRequests (requesterID, inviteeID)
      VALUES ($userID, $potentialfriendID);

    /:inviteeID          DELETE

      DELETE FROM FriendRequests
      WHERE requesterID = $userID
        AND inviteeID   = $inviteeID;

    /deny                DELETE

      DELETE FROM FriendRequests
      WHERE inviteeID   = $userID
        AND requesterID = $requesterID;

    /approve             POST

      BEGIN;
        DELETE FROM FriendRequests
        WHERE inviteeID   = $userID
          AND requesterID = $requesterID;

        INSERT INTO Friends (uID1, uID2)
        VALUES ($userID, $friendID);

        INSERT INTO Friends (uID1, uID2)
        VALUES ($friendID, $userID);
      COMMIT;
