/api/trans

  /request/:copyID DELETE : db.deleteBookRequest()

  /request           POST : db.createBookRequest()

  /deny              POST : db.deleteBookRequest()

  /checkout          POST : db.checkoutBook()
    (formerly /approve)

  /checkin           POST : db.checkinBook()
    (formerly /returned)

-----------------------------------------
/api/books

  /            POST : db.createCopy()

  /:copyID   DELETE : db.deleteCopy()

  /available    GET : db.getAvailableBooks()
    (stream results)

    -- all books that don't belong to user, aren't checked out, and user hasn't
    --   requested already

    SELECT *                         -- maybe refine this projection?
    FROM Copies c, Books b, Users u
    WHERE b.ISBN = c.ISBN
      AND u.uID  = c.ownerID
      AND c.copyID NOT IN (
        SELECT copyID
        FROM Borrowing
      )
      AND c.copyID NOT IN (
        SELECT copyID
        FROM BookRequests
        WHERE requesterID = $userID
      );

    -- limit to friends

    SELECT *                          -- maybe refine this projection?
    FROM Copies c, Books b, Users u
    WHERE b.ISBN = c.ISBN
      AND u.uID  = c.ownerID;
      AND c.ownerID IN (
        SELECT uID2
        FROM Friends
        WHERE uID1 = $userID
      )
      AND c.copyID NOT IN (
        SELECT copyID
        FROM Borrowing
      )
      AND c.copyID NOT IN (
        SELECT copyID
        FROM BookRequests
        WHERE requesterID = $userID
      );
-----------------------------------------
/api/self

  /          GET   (maybe not necessary?)

    SELECT *
    FROM Users
    WHERE uID = $userID;

  /book_requests_incoming GET : db.getIncomingBookRequests()

  /book_requests_outgoing GET : db.getOutgoingBookRequests()

  /books_lent             GET : db.getLentBooks()

  /books_borrowed         GET : db.getBorrowedBooks()

  /                    DELETE : db.deleteUser()

  /books                  GET : db.getOwnBooks()
    (stream results)

----------------------------------
// extensions to the existing API:

/api/friends

  /            GET    (may return many results)

    SELECT *
    FROM Users
    WHERE uID IN (
      SELECT uID2
      FROM Friends
      WHERE uID1 = $userID
    );

  /:friendID   DELETE

    BEGIN;
      DELETE FROM Friends
      WHERE uID1 = $userID
        AND uID2 = $friendID;

      DELETE FROM Friends
      WHERE uID1 = $friendID
        AND uID2 = $userID;
    COMMIT;

  /requests

    /                    GET

      SELECT *
      FROM FriendRequests
      WHERE requesterID

    /                    POST

      INSERT INTO FriendRequests (requesterID, inviteeID)
      VALUES ($userID, $potentialfriendID);

    /:inviteeID          DELETE

      DELETE FROM FriendRequests
      WHERE requesterID = $userID
        AND inviteeID   = $inviteeID;

    /deny                DELETE

      DELETE FROM FriendRequests
      WHERE inviteeID   = $userID
        AND requesterID = $requesterID;

    /approve             POST

      BEGIN;
        DELETE FROM FriendRequests
        WHERE inviteeID   = $userID
          AND requesterID = $requesterID;

        INSERT INTO Friends (uID1, uID2)
        VALUES ($userID, $friendID);

        INSERT INTO Friends (uID1, uID2)
        VALUES ($friendID, $userID);
      COMMIT;
