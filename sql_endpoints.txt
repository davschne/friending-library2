/api/trans

  /request/:bookid DELETE

    DELETE FROM BookRequests
    WHERE requesterID = $userid
      AND copyID = $bookid;

  /request         POST

    INSERT INTO BookRequests (requesterID, copyID, requestDate)
    VALUES (
      $userID, $copyID, CURRENT_TIME
    );

  /deny            POST

    DELETE FROM BookRequests
    WHERE requesterID = $userID
      AND copyID = $copyID;

  /approve         POST

    BEGIN;
      DELETE FROM BookRequests
      WHERE requesterID = $uIDRequester
        AND copyID = $copyID;
      INSERT INTO Borrowing (borrowerID, copyID, checkoutDate)
      VALUES (
        $userID, copyID, CURRENT_TIME
      );
    COMMIT;

  /returned        POST

    DELETE FROM Borrowing
    WHERE borrowerID = $borrowerID
      AND copyID = $copyID;

/api/books

  /          POST

    -- find if exists in Books?
    INSERT INTO Books
    VALUES (

    );
    INSERT INTO Copies (copyID, ISBN, ownerID)
    VALUES (

    );

  /:bookid   DELETE

    DELETE FROM Copies
    WHERE ownerID

  /available GET

    -- use materialized view?

    SELECT * -- maybe refine this projection?
    FROM Copies c, BookView b, Users u
    WHERE c.ownerID IN (
      SELECT uID2
      FROM Friends
      WHERE uID1 = $userID
    )
      AND b.ISBN = c.ISBN
      AND u.uID  = c.ownerID;

/api/self

  /          GET

    SELECT * -- maybe refine this projection?
    FROM Users
    WHERE uID = $userID;

  /          DELETE

    DELETE FROM Users
    WHERE uID = $userID;

  /books     GET

    -- use materialized view?

    SELECT *
    FROM Copies JOIN BookView USING(ISBN)
    WHERE ownerID = $userID;

// extensions to the existing API:

/api/friends

  /          GET

    SELECT *
    FROM Users
    WHERE uID IN (
      SELECT uID2
      FROM Friends
      WHERE uID1 = $userID
    );



